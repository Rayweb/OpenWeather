package com.finleap.weather.util;

import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Component;

import com.finleap.weather.owp.dtos.WeatherDetails;

@Component
public class WeatherAverageCalculator {

	private static final int FORECAST_DAYS = 3;
	private static final int DAY_START = 6;
	private static final int DAY_END = 18;

	public List<WeatherDetails> getWeatherDetailsForRequestedDays(List<WeatherDetails> totalWeatherDetails) {
		return totalWeatherDetails.stream().filter(twd -> isDateInRange(twd.getDt()))
				.peek(twd -> System.out.println(twd.dt_txt)).collect(Collectors.toList());
	}

	public double getDailyAveragetemperature(List<WeatherDetails> weatherDetails) {
		return weatherDetails.stream().filter(wd -> isDateInRange(wd.getDt()))
				.filter(wd -> isDayTimeForecast(wd.getDt())).peek(twd -> System.out.println(twd.dt_txt))
				.mapToDouble(wd -> wd.main.getTemp()).summaryStatistics().getAverage();
	}

	public double getNightlyAveragetemperature(List<WeatherDetails> weatherDetails) {
		return weatherDetails.stream().filter(wd -> isDateInRange(wd.getDt()))
				.filter(wd -> !isDayTimeForecast(wd.getDt())).peek(twd -> System.out.println(twd.dt_txt))
				.mapToDouble(wd -> wd.main.getTemp()).summaryStatistics().getAverage();
	}

	public double getPressureAverage(List<WeatherDetails> weatherDetails) {
		return weatherDetails.stream().filter(wd -> isDateInRange(wd.getDt())).mapToDouble(wd -> wd.main.getPressure())
				.summaryStatistics().getAverage();
	}

	public boolean isDateInRange(Instant dt) {
		Instant today = Instant.now();
		LocalDateTime dtForecast = LocalDateTime.ofInstant(dt, ZoneOffset.UTC);
		LocalDateTime ldtLimit = LocalDateTime.ofInstant(today, ZoneOffset.UTC);
		ldtLimit = ldtLimit.plus(FORECAST_DAYS, ChronoUnit.DAYS);
		return dtForecast.getDayOfYear() <= ldtLimit.getDayOfYear();
	}

	public boolean isDayTimeForecast(Instant dt) {
		LocalDateTime dtForecast = LocalDateTime.ofInstant(dt, ZoneOffset.UTC);
		return dtForecast.getHour() >= DAY_START && dtForecast.getHour() <= DAY_END;
	}
}
